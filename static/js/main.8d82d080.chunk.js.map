{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["require","XMLHttpRequest","App","className","open","send","onload","map","JSON","parse","responseText","data","map2","topojson","objects","counties","features","d3","append","text","attr","style","svg","selectAll","enter","i","id","document","getElementById","getBoundingClientRect","x","y","forEach","e","setAttribute","info","getAttribute","on","this","html","legend","lScale","domain","range","lA","ticks","tickFormat","tickSize","call","ReactDOM","render","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d82d080.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom'\nimport * as d3 from 'd3'\nimport './App.css';\nimport * as topojson from \"topojson-client\";\nimport { style } from 'd3';\n\nconst require = new XMLHttpRequest()\n  require.open(\"GET\", \"https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/counties.json\")\n  require.send()\n  require.onload = function () {\n    let map = JSON.parse(require.responseText)\n\n  require.open(\"GET\", \"https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/for_user_education.json\")\n  require.send()\n  require.onload = function () {\n    let data = JSON.parse(require.responseText)\n    \n    let map2 = topojson.feature(map, map.objects.counties).features // https://forum.freecodecamp.org/t/d3-topojson-feature-explanation/235396\n    d3.select('.App')\n      .append('H1')\n      .text('US Post Secondary Education Levels')\n      .attr('id', 'title')\n      .style('margin-top', '10px')\n\n    d3.select('.App')\n      .append('H4')\n      .text('Percentage of Adults Age 25+, Holding a Bachelors Degree or Higher')\n      .attr('id', 'description')\n      .style('margin-top', '-10px')\n\n    const w = 1000\n    const h = 600\n\n    const svg = d3.select('.App')\n                  .append('svg')\n                  .attr('height', h)\n                  .attr('width', w)\n                  .style('margin-top', '-60px');\n                  \n                  \n\n    svg.selectAll('path')  \n       .data(map2) \n       .enter()\n       .append('path')   \n       .attr('d', d3.geoPath())\n       .attr('id', i => i.id)\n       .attr('data-fips', i => i.id)\n       .attr('class', 'county')\n       .attr('xCoord', i => (document.getElementById(i.id).getBoundingClientRect().x -w-180) + 'px') // Got clues as to using getBoundingClientRect() from here https://www.digitalocean.com/community/tutorials/js-getboundingclientrect\n       .attr('yCoord', i => (document.getElementById(i.id).getBoundingClientRect().y -90) + 'px');\n       \n       \n    data.forEach(e=> document.getElementById(e['fips'])\n                             .setAttribute('data-education', e[\"bachelorsOrHigher\"])\n                             ) \n    data.forEach(e=> document.getElementById(e['fips'])                   \n                             .setAttribute('area', e[\"area_name\"])\n                             )                    \n    data.forEach(e=> document.getElementById(e['fips'])\n                             .setAttribute('state', e['state'])\n                             )  \n\n   let info = d3.select('.App')\n                  .append('div')\n                  .style('height', \"20px\")\n                  \n                  .style('background-color', 'rgb(63,63,64,0.8')\n                  .style('padding', \"5px 10px\")\n                  .style('border-radius', '5%')\n                  .style('color', 'white')\n                  .style('font-size', '12px')\n                  .style('display', 'none')\n                  .style('position', 'absolute') \n                  .attr('id', 'tooltip') //inspired by the last answer on this post (https://www.freecodecamp.org/forum/t/d3-tooltip-wanted-is-that-15-chars-now/92398/6)\n                  \n                  \n\n      svg.selectAll('path') \n         .style('fill', e=> \n          \n              document.getElementById(e['id']).getAttribute('data-education') >56? \"hsl(220,100%,50%)\" \n            : document.getElementById(e['id']).getAttribute('data-education') >49? \"hsl(220,100%,56%)\" \n            : document.getElementById(e['id']).getAttribute('data-education') >42? \"hsl(220,100%,62%)\" \n            : document.getElementById(e['id']).getAttribute('data-education') >35? \"hsl(220,100%,69%)\" \n            : document.getElementById(e['id']).getAttribute('data-education') >28? \"hsl(220,100%,75%)\" \n            : document.getElementById(e['id']).getAttribute('data-education') >21? \"hsl(220,100%,81%)\" \n            : document.getElementById(e['id']).getAttribute('data-education') >14? \"hsl(220,100%,87%)\" \n            : document.getElementById(e['id']).getAttribute('data-education') >7? \"hsl(220,100%,93%)\" \n            : \"white\" )\n         .on('mouseover', function(e) {\n           info = info.style('display', 'inline')\n                      .attr('data-education', this.getAttribute('data-education'))\n                      .style('transform', i => 'translate(' + this.getAttribute('xCoord') + ',' + this.getAttribute('yCoord') +')')\n                      .html('<div>' + this.getAttribute('area') + ', ' + this.getAttribute('state') + ': ' + this.getAttribute('data-education') + '% </div>')\n                     \n         }) \n         .on('mouseout', function (e) {\n          info = info.style('display', 'none')\n        });\n\n     const leg = [1,2,3,4,5,6,7,8]\n\n     const legend = d3.select('.App') //Took my legend from my Heat Map and altered it\n                      .append('svg')\n                      .attr('height', 40)\n                      .attr('width', 247)\n                      .attr('id', 'legend')\n                      .style('margin-top', \"-40px\")\n                      .style('text-align', 'center')\n                      .attr(\"transform\", \"translate(-150,0)\")\n\n    legend.selectAll('rect')\n                      .data(leg) \n                      .enter()\n                      .append('rect') \n                      .attr('height', 15)\n                      .attr('width', 30)\n                      .attr('x', i => -22.5 + i*30)\n                      .style('fill', i => i===8? 'hsl(220,100%,50%)' : i===7? \"hsl(220,100%,56%)\" : i===6? \"hsl(220,100%,62%)\" : i===5? \"hsl(220,100%,68%)\" : i==4? \"hsl(220,100%,75%)\" : i===3? \"hsl(220,100%,81%)\" : i===2? \"hsl(220,100%,87%)\" : \"hsl(220,100%,93%)\")                 \n      \n    const lScale = d3.scaleLinear()\n                      .domain([1,9])\n                      .range([7,247])\n    \n\n  const lA = d3.axisBottom(lScale)\n               .ticks(9)\n               .tickFormat(i=> i===1? \"7%\" : i===2? \"14%\" : i===3? \"21%\" : i===4? \"28%\": i===5? \"35%\" : i===6? '42%' : i===7? '49%' : i===8? '56% +' : '')\n               .tickSize(30,0) // looked here for changing ticksize https://stackoverflow.com/questions/21583032/custom-tick-size-on-axis-d3js\n\n  legend.append('g')\n     .attr('id', 'leg-axis')\n     .attr(\"transform\", \"translate(0,-4)\")\n     .call(lA)     \n                      \n\n  }\n  }\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n\n    <div></div>\n    </div>\n  );\n}\nReactDOM.render(<App />, document.getElementById('root'))\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}